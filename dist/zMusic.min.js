(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("zMusic", [], factory);
	else if(typeof exports === 'object')
		exports["zMusic"] = factory();
	else
		root["zMusic"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var currency = {
    getTime: function getTime(time) {
        var min = Math.floor(time / 60);
        var sec = Math.floor(time % 60);
        var minStr = min >= 10 ? min : '0' + min;
        var secStr = sec >= 10 ? sec : '0' + sec;
        return minStr + ':' + secStr;
    },
    leftDistance: function leftDistance(el) {
        var left = el.offsetLeft;
        var scrollLeft = void 0;
        while (el.offsetParent) {
            el = el.offsetParent;
            left += el.offsetLeft;
        }
        scrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft;
        return left - scrollLeft;
    },
    ajax: function ajax(option) {
        //传入的option是一个对象包括url和回调函数
        if (option.beforeSend) {
            option.beforeSend();
        }
        var url = option.url;
        if (option.songId) {
            url += '?channel=' + option.songId;
        }
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.readyState == 4 && (xhr.status >= '200' || xhr.status == '304')) {
                        var data = JSON.parse(xhr.responseText);
                        resolve(data); //当得到数据时候数据传入这个回调函数
                    } else {
                        reject(xhr.status);
                    }
                }
            };
            xhr.onerror = function () {
                reject('ajax error'); //出现错误调用这个回调函数
            };
            xhr.open('get', url, true);
            xhr.send();
        });
    }
};
module.exports = currency;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function template() {

    var html = " \n            <div id=\"player\">\n                <div class=\"music-photo-ct\">\n                    <div class=\"music-photo\" style=\"background-image: url(" + this.songData[0].picture + ");\"></div>\n                </div>\n                <h3>" + this.songData[0].title + "</h3>\n                <p>" + this.songData[0].artist + "</p>\n                <div class=\"line\">\n                    <div class=\"line-loading\"></div>\n                    <div class=\"play-time\">\n                        <div></div>\n                        <span class=\"cur\">--:--</span>/<span class=\"total\">--:--</span>\n                    </div>\n                </div>\n                <div class=\"btns\">\n                    <div class=\"btn random\"></div>\n                    <div class=\"btn play\">\n                        <div class=\"icon-play\"></div>\n                    </div>\n                    <div class=\"btn next\"></div>\n                    <div class=\"collect\"><img src=\"./src/imgs/collect-yes.png\" alt=\"\"></div>\n                </div>\n            </div>\n            <div id=\"album-list\">\n                <div class=\"list-ct\">\n                    <ul class=\"clearfix\">";

    for (var key in this.albumData) {
        html += "<li data-index=\"" + key + "\">\n                    <h4 data-index=\"" + key + "\">" + this.albumData[key].name + "</h4>\n                    <div data-index=\"" + key + "\" style=\"background-image: url(" + this.albumData[key].cover_small + ");\">\n                    </div>\n                    <span class=\"ds\"></span>\n                </li>";
    }

    html += "\n                    </ul>\n                </div >\n            </div > ";

    return html;
};

module.exports = template;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

__webpack_require__(2);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

console.log('Z-Music 1.0');

var currency = __webpack_require__(0);
var template = __webpack_require__(1);

var albumUrl = '//api.jirengu.com/fm/getChannels.php';
var songUrl = '//api.jirengu.com/fm/getSong.php';
var lyricUrl = '//api.jirengu.com/fm/getLyric.php';

var zMusic = function () {
    function zMusic() {
        var _this = this;

        _classCallCheck(this, zMusic);

        this.ct = document.getElementById('z-music');

        this.albumData = {};
        this.songData = {};
        this.albumIndex = 36; //默认专辑列表
        this.music = new Audio();

        this.ct.innerHTML = '<div class="zmusic-loading"><p>LOADING...</p></div>';

        currency.ajax({
            url: albumUrl,
            beforeSend: function beforeSend() {
                console.log('正在获取专辑数据');
            }
        }).then(function (data) {
            console.log('成功获得专辑数据');
            _this.albumData = data.channels;
            return currency.ajax({
                url: songUrl,
                songId: _this.albumData[_this.albumIndex].channel_id,
                beforeSend: function beforeSend() {
                    console.log('正在获取歌曲数据');
                }
            });
        }, function (err) {
            console.log('获取专辑好像出错了!状态码:' + err);
        }).then(function (data) {
            console.log('成功获得歌曲数据');
            _this.songData = data.song;
            _this.ct.innerHTML = template.call(_this);
            _this.music.src = _this.songData[0].url;
            _this.init();
            _this.bind();
        }, function (err) {
            console.log('获取歌曲好像出错了!状态码:' + err);
        });
    }

    _createClass(zMusic, [{
        key: 'init',
        value: function init() {
            this.dom = {
                albums: this.ct.querySelectorAll('.list-ct>ul>li'),
                albumCt: this.ct.querySelector('.list-ct>ul'),
                btn_play: this.ct.querySelector('.btns>.play'),
                btn_play_icon: this.ct.querySelector('.btns>.play>.icon-play'),
                btn_next: this.ct.querySelector('.btns>.next'),
                btn_random: this.ct.querySelector('.btns>.random'),
                btn_collect: this.ct.querySelector('.btns>.collect'),
                play_line: this.ct.querySelector('.line'),
                play_line_loading: this.ct.querySelector('.line>.line-loading'),
                play_time: this.ct.querySelector('.line>.play-time'),
                play_loading: this.ct.querySelector('.line>.play-time>div'),
                time: this.ct.querySelectorAll('.line>.play-time>span'),
                time_cur: this.ct.querySelector('.line>.play-time>.cur'),
                time_total: this.ct.querySelector('.line>.play-time>.total'),
                player_h3: this.ct.querySelector('#player>h3'),
                player_p: this.ct.querySelector('#player>p'),
                player_music_photo_ct: this.ct.querySelector('#player>.music-photo-ct'),
                player_music_photo: this.ct.querySelector('#player>.music-photo-ct>.music-photo')
            };
            this.layout(); // 通过js设置album-list的宽度
        }
    }, {
        key: 'bind',
        value: function bind() {
            var _this2 = this;

            this.music.addEventListener('durationchange', function (e) {
                //duration属性（媒体总播放时间）改变触发
                var dateStr = _this2.music.duration.toString();
                _this2.dom.time_total.innerHTML = currency.getTime(dateStr);
            });
            var shouldUpdate = true;
            this.music.addEventListener('timeupdate', function (e) {
                //currentTime（已播放时间）不合理或意外方式更新触发timeupdate事件,这个事件的触发频率由系统决定，但是会保证每秒触发4-66次
                if (shouldUpdate) {
                    shouldUpdate = false;
                    setTimeout(function () {
                        var dateStr = _this2.music.currentTime.toString();
                        _this2.dom.time_cur.innerHTML = currency.getTime(dateStr);
                        _this2.dom.play_time.style.left = _this2.music.currentTime / _this2.music.duration * 100 + '%';
                        shouldUpdate = true;
                    }, 1000);
                }
            });
            this.music.addEventListener('progress', function (e) {
                //正在下载缓存
                var percent = _this2.music.buffered.length ? _this2.music.buffered.end(_this2.music.buffered.length - 1) / _this2.music.duration : 0;
                _this2.dom.play_line_loading.style.width = percent * 100 + '%';
            });
            this.music.addEventListener('waiting', function (e) {
                //没有数据而不能播放用来设置加载中动画
                console.log('不能播放哦');
                _this2.dom.play_loading.classList.add('loading');
            });
            this.music.addEventListener('canplay', function (e) {
                //缓存可以播放但是但是网速不好会停止删除加载动画
                console.log('可以播放哦');
                _this2.dom.play_loading.classList.remove('loading');
            });
            this.music.addEventListener('ended', function (e) {
                //当前歌曲播放结束触发
                _this2.getMusic(_this2.albumIndex);
            });
            //---
            this.dom.btn_play.addEventListener('click', function () {
                _this2.playToggle();
            });
            this.dom.btn_random.addEventListener('click', function () {
                console.log('单击循环');
                _this2.loopToggle();
                console.log(_this2.music.loop);
            });
            this.dom.btn_next.addEventListener('click', function () {
                console.log('下一曲');
                _this2.getMusic(_this2.albumIndex);
            });
            this.dom.albumCt.addEventListener('click', function (event) {
                var e = event || window.event;
                var _target = e.target;
                var index = _target.getAttribute('data-index');
                if (index) {
                    _this2.albumIndex = index;
                    _this2.getMusic(_this2.albumIndex);
                }
            });
            this.dom.play_line.addEventListener('click', function (event) {
                var e = event || window.event;
                var percent = (e.clientX - currency.leftDistance(_this2.dom.play_line)) / _this2.dom.play_line.clientWidth;
                if (!isNaN(_this2.music.duration)) {
                    _this2.dom.play_time.style.left = percent * 100 + '%';
                    _this2.dom.time_cur.innerHTML = currency.getTime(percent * _this2.music.duration);
                    _this2.music.currentTime = percent * _this2.music.duration;
                }
            });
            //测试用按钮
            this.dom.btn_collect.addEventListener('click', function (event) {
                console.log('测试');
            });
        }
    }, {
        key: 'play',
        value: function play() {
            if (this.music.paused) {
                this.music.play();
                this.dom.btn_play_icon.classList.add('icon-pause');
                this.dom.player_music_photo.classList.add('disk');
            }
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (!this.music.paused) {
                this.music.pause();
                this.dom.btn_play_icon.classList.remove('icon-pause');
                this.setTransform();
                this.dom.player_music_photo.classList.remove('disk');
            }
        }
    }, {
        key: 'playToggle',
        value: function playToggle() {
            console.log('进入切换');
            this.music.paused ? this.play() : this.pause();
        }
    }, {
        key: 'getMusic',
        value: function getMusic(index) {
            var _this3 = this;

            //index参数只是用来确定专辑；由于接口原因确定专辑后每次next都是在该专辑里随机播放一首歌曲
            currency.ajax({
                url: songUrl,
                songId: this.albumData[index].channel_id,
                beforeSend: function beforeSend() {
                    console.log('正在获取歌曲数据');
                }
            }).then(function (data) {
                console.log('成功获得歌曲数据');
                _this3.songData = data.song;
                _this3.render_player();
                _this3.music.src = _this3.songData[0].url;
                _this3.play();
            }, function (err) {
                console.log('获取歌曲好像出错了!状态码:' + err);
            });
        }
    }, {
        key: 'loopOn',
        value: function loopOn() {
            this.music.loop = true;
            this.dom.btn_random.classList.add('loop');
        }
    }, {
        key: 'loopOff',
        value: function loopOff() {
            this.music.loop = false;
            this.dom.btn_random.classList.remove('loop');
        }
    }, {
        key: 'loopToggle',
        value: function loopToggle() {
            this.music.loop ? this.loopOff() : this.loopOn();
        }
    }, {
        key: 'layout',
        value: function layout() {
            function style(element, pseduoElement) {
                return element.currentStyle ? element.currentStyle : window.getComputedStyle(element, pseduoElement);
            };
            var albumTotal = this.albumData.length;
            var theCSS = style(this.dom.albums[1], null);
            var albumWidth = parseInt(theCSS.width);
            var albumMargin = parseInt(theCSS.marginLeft);
            this.dom.albumCt.style.width = (albumTotal + 1) * (albumWidth + albumMargin) + 'px';
        }
    }, {
        key: 'render_player',
        value: function render_player() {
            this.dom.player_music_photo.setAttribute("style", 'background-image:url(' + this.songData[0].picture + ')');
            this.dom.player_h3.innerHTML = this.songData[0].title;
            this.dom.player_p.innerHTML = this.songData[0].artist;
        }
    }, {
        key: 'setTransform',
        value: function setTransform() {
            var photoTransform = document.defaultView.getComputedStyle(this.dom.player_music_photo, null).transform;
            var ctTransform = document.defaultView.getComputedStyle(this.dom.player_music_photo_ct, null).transform;
            this.dom.player_music_photo_ct.style.transform = ctTransform === 'none' ? photoTransform : photoTransform.concat(ctTransform);
            //String.concat(要添加的str)方法就是在原有的String添加一个的str组成一个新的str（通Array.concat一样）
            //本质上是因为 CSS 里 transform 可以接受多种变换的叠加
            //例如 this.dom.player_music_photo_ct.style.transform = 'matrix(0.904848, 0.425734, -0.425734, 0.904848, 0, 0)matrix(0.904848, 0.425734, -0.425734, 0.904848, 0, 0)'
        }
    }]);

    return zMusic;
}();

module.exports = zMusic;

/***/ })
/******/ ]);
});